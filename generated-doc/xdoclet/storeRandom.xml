<?xml version="1.0" encoding="iso-8859-1"?><manpage xmlns:java="http://xml.apache.org/xalan/java" siteid="storeRandom"><site name="WebTest">
	<level1 name="Home" url="WebTestHome.html">
		<level2 name="Home" url="WebTestHome.html"/>
		<level2 name="Key Characteristics" url="keyCharacteristics.html"/>
		<level2 name="White Paper" url="whitepaper.html"/>
		<level2 name="Downloads" url="Downloads.html"/>
		<level2 name="Install" url="install.html"/>
		<level2 name="Troubleshooting" url="troubleshooting.html"/>
		<level2 name="Acknowledgments" url="acknowledgments.html"/>
		<level2 name="Issue tracker" url="https://github.com/DaveParillo/webtest/issues"/>
		<level2 name="Source code" url="https://github.com/DaveParillo/webtest"/> 
		<level2 name="License" url="license.html"/>
	</level1>
	<level1 name="Manual" url="manualOverview.html">
		<level2 name="Manual Overview" url="manualOverview.html"/>
		<level2 name="Samples" url="samples.html"/>
		<level2 name="Properties" url="properties.html"/>
		<level2 name="Syntax Reference - General Steps" url="syntaxGeneral.html"/>
		<level2 name="Syntax Reference - Core Steps" url="syntaxCore.html"/>
		<level2 name="Syntax Reference - Extension Steps" url="syntaxExtension.html"><level3 name="alert" url="alert.html"/><level3 name="antWrapper" url="antWrapper.html"/><level3 name="clickElement" url="clickElement.html"/><level3 name="closeWindow" url="closeWindow.html"/><level3 name="condition" url="condition.html"/><level3 name="confirm" url="confirm.html"/><level3 name="countWebtestResults" url="countWebtestResults.html"/><level3 name="dataDriven" url="dataDriven.html"/><level3 name="dragAndDrop" url="dragAndDrop.html"/><level3 name="enableJavaScript" url="enableJavaScript.html"/><level3 name="expectDialog" url="expectDialog.html"/><level3 name="expectDialogs" url="expectDialogs.html"/><level3 name="forceHiddenInputField" url="forceHiddenInputField.html"/><level3 name="forceInputFieldAttribute" url="forceInputFieldAttribute.html"/><level3 name="groovy" url="groovy.html"/><level3 name="ifStep" url="ifStep.html"/><level3 name="mouseOut" url="mouseOut.html"/><level3 name="mouseOver" url="mouseOver.html"/><level3 name="prompt" url="prompt.html"/><level3 name="reportLinks" url="reportLinks.html"/><level3 name="reportSite" url="reportSite.html"/><level3 name="retry" url="retry.html"/><level3 name="scriptStep" url="scriptStep.html"/><level3 name="selectWebClient" url="selectWebClient.html"/><level3 name="selectWindow" url="selectWindow.html"/><level3 name="storeDigest" url="storeDigest.html"/><level3 name="storeElementAttribute" url="storeElementAttribute.html"/><level3 name="storeInputFieldAttribute" url="storeInputFieldAttribute.html"/><level3 name="storeLength" url="storeLength.html"/><level3 name="storeLinkParameter" url="storeLinkParameter.html"/><level3 name="storeRandom" url="storeRandom.html"/><level3 name="storeResponseCode" url="storeResponseCode.html"/><level3 name="timedGroup" url="timedGroup.html"/><level3 name="verifyContent" url="verifyContent.html"/><level3 name="verifyDocumentURL" url="verifyDocumentURL.html"/><level3 name="verifyHeader" url="verifyHeader.html"/><level3 name="verifyImages" url="verifyImages.html"/><level3 name="verifyLinkedContent" url="verifyLinkedContent.html"/><level3 name="verifyNoDialogs" url="verifyNoDialogs.html"/></level2>
		<level2 name="Syntax Reference - Filter Steps" url="syntaxFilter.html"/>
        <level2 name="Syntax Reference - PDF Steps" url="syntaxPDF.html"/>
        <level2 name="Syntax Reference - Excel Steps" url="syntaxExcel.html"/>
        <level2 name="Syntax Reference - Email Steps" url="syntaxEmail.html"/>
        <level2 name="Step Index" url="stepIndex.html"/>
        <level2 name="Groovy Testing" url="groovyTesting.html"/>
        <level2 name="Integration with other Tools" url="integration.html"/>
		<level2 name="Annotated References" url="annotatedRefs.html"/>
	</level1>
	<level1 name="Develop" url="developOverview.html">
		<level2 name="Develop Overview" url="developOverview.html"/>
		<level2 name="Building" url="building.html"/>
		<level2 name="Release" url="release.html"/>
	</level1>
	<level1 name="Build Info" url="buildOverview.html">
		<level2 name="Build Overview" url="/webtest/manual/buildOverview.html"/>
		<level2 name="Unit Test Report" url="/webtest/junit/index.html"/>
		<level2 name="Self Test Report" url="/webtest/reports/selftest/index.html"/>
		<level2 name="Release Test Report" url="/webtest/reports/releasetest/index.html"/>
		<level2 name="API Doc" url="/webtest/api/"/>
	</level1>
</site><head title="Extension Step| storeRandom"/><section title="Description"><b>Provides the ability to store a random number, string or token value for later processing. Useful to avoid setting (and maintaining) large numbers of properties containing test data when specific test values aren't important.</b><pre>
    <b>
        Maintaining test data can be one of the biggest challenges
        with keeping a test suite relevant and not too brittle as
        environments, requirements and external factors change. Random
        data provides another valuable tool to assist in maintaining test
        data in complex systems.
    </b>
    <b>
        Care must be exercised when using random data. If selecting test
        data by hand, careful choices can be made to ensure that boundary
        cases are covered by tests. Using purely random data may make this
        harder to do. Having said that, random data
        can simplify build scripts, can reduce the risk that poor
        test cases are chosen and lends itself to being suitable for
        load or stress testing with different data in multiple test runs.
    </b>
</pre></section><section title="Parameters"><attributes><attribute><name>description</name><description>The description of this test step.</description><required>no</required></attribute><attribute><name>from</name><description>Used when storing a random number. The random number stored will be greater than or equal to this number. Required if <em>to</em> is set. Parameters <em>length</em> and <em>choice</em> must be empty.</description><required>yes/no</required></attribute><attribute><name>to</name><description>Used when storing a random number. The random number stored will be less than or equal to this number. Required if <em>from</em> is set. Parameters <em>length</em> and <em>choice</em> must be empty.</description><required>yes/no</required></attribute><attribute><name>length</name><description>Used when storing a random string. The length of the random string to store (i.e. the number of characters to randomly select). Parameters <em>from</em>, <em>to</em> and <em>choice</em> must be empty.</description><required>yes/no</required></attribute><attribute><name>chars</name><description>Used when storing a random string. The set of characters to choose from when creating the random string. Ignored unless <em>length</em> is set.</description><required>no, default is
					the upper and lowercase alphabets plus numbers plus spaces</required></attribute><attribute><name>choice</name><description>Used when storing a random token. The comma delimited choice of tokens to randomly select between. Parameters <em>from</em>, <em>to</em> and <em>length</em> must be empty.</description><required>yes/no</required></attribute><attribute><name>property</name><description>The name of the property in which to store the retrieved value.</description><required>no</required></attribute><attribute><name>propertyType</name><description>The type of the property in which to store the retrieve value. Either "ant" or "dynamic".</description><required>no, default is
					the "defaultPropertyType" as specified in the "config" element is used.</required></attribute></attributes></section><section title="Details"><post>

    <b>Consider the following JSP which allows user preference information to be gathered
        in a form and produces a subsequent page based on the choices made:</b>

    <code caption="storeRandom JSP under test">
        <include src="examples/favouriteJsp.xml"/>
    </code>

    <b>If a field value in our form takes on one of several values, e.g.
        the colours in this example, we can randomly select a value to
        use from that list of tokens:</b>

    <code caption="storeRandom token Example">
        <include src="examples/storeRandomExample1.xml"/>
    </code>

    <b>Here is an example which selects a random number for a field
        expecting a number between 1 and 6 (corresponding to setting
        the heading level to be one of "H1" through "H6"). Note that we also allow
        some numbers outside the desired range to test that server validation
        is working (in our examples it rounds to the nearest valid value):</b>

    <code caption="storeRandom number Example">
        <include src="examples/storeRandomExample2.xml"/>
    </code>

    <b>We can combine XPath with random selection to perform very powerful
        operations, e.g. in this example we randomly select one of the "option"
        values from a "select" element in the
        <key>HTML</key> form (note that in this example we skip over the empty
        option value by starting the random number at "2"):</b>

    <code caption="storeRandom tricky number and XPath Example">
        <include src="examples/storeRandomExample3.xml"/>
    </code>

    <b>In this final example, we generate random first and last names. Each name
        starts with a random uppercase character, and is followed by a random
        number of random lowercase characters:</b>

    <code caption="storeRandom string Example">
        <include src="examples/storeRandomExample4.xml"/>
    </code>

    <b>The full example (found in <em>storeRandom.xml</em> in the selftests) the test
        then goes on to submit the form (by clicking its button) which causes a new page
        to be created based on the preferences chosen in the form. The form is then tested
        to ensure the actual attributes used to generate the form match the above
        randomly generated expected values.</b>

</post></section></manpage>