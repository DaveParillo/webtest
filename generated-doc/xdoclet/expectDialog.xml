<?xml version="1.0" encoding="iso-8859-1"?><manpage xmlns:java="http://xml.apache.org/xalan/java" siteid="expectDialog"><site name="WebTest">
	<level1 name="Home" url="WebTestHome.html">
		<level2 name="Home" url="WebTestHome.html"/>
		<level2 name="Key Characteristics" url="keyCharacteristics.html"/>
		<level2 name="White Paper" url="whitepaper.html"/>
		<level2 name="Downloads" url="Downloads.html"/>
		<level2 name="Install" url="install.html"/>
		<level2 name="Troubleshooting" url="troubleshooting.html"/>
		<level2 name="Acknowledgments" url="acknowledgments.html"/>
		<level2 name="Issue tracker" url="https://github.com/DaveParillo/webtest/issues"/>
		<level2 name="Source code" url="https://github.com/DaveParillo/webtest"/> 
		<level2 name="License" url="license.html"/>
	</level1>
	<level1 name="Manual" url="manualOverview.html">
		<level2 name="Manual Overview" url="manualOverview.html"/>
		<level2 name="Samples" url="samples.html"/>
		<level2 name="Properties" url="properties.html"/>
		<level2 name="Syntax Reference - General Steps" url="syntaxGeneral.html"/>
		<level2 name="Syntax Reference - Core Steps" url="syntaxCore.html"/>
		<level2 name="Syntax Reference - Extension Steps" url="syntaxExtension.html"><level3 name="alert" url="alert.html"/><level3 name="antWrapper" url="antWrapper.html"/><level3 name="clickElement" url="clickElement.html"/><level3 name="closeWindow" url="closeWindow.html"/><level3 name="condition" url="condition.html"/><level3 name="confirm" url="confirm.html"/><level3 name="countWebtestResults" url="countWebtestResults.html"/><level3 name="dataDriven" url="dataDriven.html"/><level3 name="dragAndDrop" url="dragAndDrop.html"/><level3 name="enableJavaScript" url="enableJavaScript.html"/><level3 name="expectDialog" url="expectDialog.html"/><level3 name="expectDialogs" url="expectDialogs.html"/><level3 name="forceHiddenInputField" url="forceHiddenInputField.html"/><level3 name="forceInputFieldAttribute" url="forceInputFieldAttribute.html"/><level3 name="groovy" url="groovy.html"/><level3 name="ifStep" url="ifStep.html"/><level3 name="mouseOut" url="mouseOut.html"/><level3 name="mouseOver" url="mouseOver.html"/><level3 name="prompt" url="prompt.html"/><level3 name="reportLinks" url="reportLinks.html"/><level3 name="reportSite" url="reportSite.html"/><level3 name="retry" url="retry.html"/><level3 name="scriptStep" url="scriptStep.html"/><level3 name="selectWebClient" url="selectWebClient.html"/><level3 name="selectWindow" url="selectWindow.html"/><level3 name="storeDigest" url="storeDigest.html"/><level3 name="storeElementAttribute" url="storeElementAttribute.html"/><level3 name="storeInputFieldAttribute" url="storeInputFieldAttribute.html"/><level3 name="storeLength" url="storeLength.html"/><level3 name="storeLinkParameter" url="storeLinkParameter.html"/><level3 name="storeRandom" url="storeRandom.html"/><level3 name="storeResponseCode" url="storeResponseCode.html"/><level3 name="timedGroup" url="timedGroup.html"/><level3 name="verifyContent" url="verifyContent.html"/><level3 name="verifyDocumentURL" url="verifyDocumentURL.html"/><level3 name="verifyHeader" url="verifyHeader.html"/><level3 name="verifyImages" url="verifyImages.html"/><level3 name="verifyLinkedContent" url="verifyLinkedContent.html"/><level3 name="verifyNoDialogs" url="verifyNoDialogs.html"/></level2>
		<level2 name="Syntax Reference - Filter Steps" url="syntaxFilter.html"/>
        <level2 name="Syntax Reference - PDF Steps" url="syntaxPDF.html"/>
        <level2 name="Syntax Reference - Excel Steps" url="syntaxExcel.html"/>
        <level2 name="Syntax Reference - Email Steps" url="syntaxEmail.html"/>
        <level2 name="Step Index" url="stepIndex.html"/>
        <level2 name="Groovy Testing" url="groovyTesting.html"/>
        <level2 name="Integration with other Tools" url="integration.html"/>
		<level2 name="Annotated References" url="annotatedRefs.html"/>
	</level1>
	<level1 name="Develop" url="developOverview.html">
		<level2 name="Develop Overview" url="developOverview.html"/>
		<level2 name="Building" url="building.html"/>
		<level2 name="Release" url="release.html"/>
	</level1>
	<level1 name="Build Info" url="buildOverview.html">
		<level2 name="Build Overview" url="/webtest/manual/buildOverview.html"/>
		<level2 name="Unit Test Report" url="/webtest/junit/index.html"/>
		<level2 name="Self Test Report" url="/webtest/reports/selftest/index.html"/>
		<level2 name="Release Test Report" url="/webtest/reports/releasetest/index.html"/>
		<level2 name="API Doc" url="/webtest/api/"/>
	</level1>
</site><head title="Extension Step| expectDialog"/><section title="Description"><b>Provides the ability to set expectations in relation to user responses to <key>javascript</key> Dialog boxes (Alert, Confirm and Prompt dialogs).</b><pre>
    <b>This step is used prior to clicking on a link or button
        which invokes some
        <key>javascript</key>
        that uses dialogs (Alert, Confirm or Prompt dialogs).
        If you don't use this step,
        <key>CWT</key>
        simply clicks 'OK' on every dialog silently.
        This is OK if you don't care about the Dialogs, but if you do care, you have no way of
        telling if anything was actually clicked or what messages were displayed in the dialogs.
    </b>

    <b>You may be wondering why you need to set up expectations prior to clicking on a link
        or button. This is mostly due to implementation issues with the way <key>CWT</key>
        works and the way it calls <key>htmlunit</key> . It turns out to be easier at the moment to
        create a list of dialog expectations. As interactions with your application cause
        <key>javascript</key> to invoke dialogs, we simply look at the next dialog expectation
        on the list, check that it meets expectations (or optionally save away the dialog
        message text) and then remove it from the list. For tricky <key>javascript</key>
        there may be multiple interactions from the user.
        We simply list all the expected dialog interactions in the order we expect them to
        occur by repeating this step as many times as required. (Alternatively, consider
        using the newer <stepref name="expectDialogs"/> step which allows more concise expression
        of dialog sequences.)
    </b>

    <b>Often you will use the
        <stepref name="verifyNoDialogs"/>
        step in conjunction
        with this step to ensure that your expectations for dialogs were met. The
        <stepref name="verifyNoDialogs"/>
        step is used after clicking on your link or button - it
        checks that the list of expected dialogs is now empty, i.e. by the
        time you have finished interacting with your application all the dialogs you
        were expecting to need clicking were actually clicked.
    </b>
</pre></section><section title="Parameters"><attributes><attribute><name>description</name><description>The description of this test step.</description><required>no</required></attribute><attribute><name>saveProperty</name><description>The name of the property in which to store the dialog text for later checking with "verifyProperty".</description><required>no</required></attribute><attribute><name>savePropertyType</name><description>The type of the property in which to store the dialog text for later checking. Either "ant" or "dynamic".</description><required>no, default is
					the "defaultPropertyType" as specified in the "config" element is used.</required></attribute><attribute><name>dialogType</name><description>One of "alert", "confirm" or "prompt".</description><required>no, default is
					alert</required></attribute><attribute><name>response</name><description>simulate user response: ignored for alerts, converted to boolean for confirms - "OK" (true) or "Cancel" (false), contains typed text for prompts.</description><required>no, default is
					true</required></attribute></attributes></section><section title="Details"><post>

    <b>Normally only one <em>&lt;expectDialog&gt;</em> step will be required but if you have
    complex <key>javascript</key>, it may require the user to respond to multiple dialogs associated
    with one form or link click. If this is the case (as in the complex example below) you should
    use multiple <em>&lt;expectDialog&gt;</em> steps in the same order that the user would respond
    to them in or consider using the enhanced <stepref name="expectDialogs"/> step. If you want to
    check that no dialogs were in fact used, you <em>must</em> use the <stepref name="expectDialogs"/> step.
    Only one <stepref name="verifyNoDialogs"/> is ever required after the click event
    to check that everything worked as planned.</b>

    <b>If you were expecting the <key>javascript</key> to invoke 2 dialog but only one was in fact
    invoked, the <stepref name="verifyNoDialogs"/> step will fail with an appropriate error message.
    Similarly, if you expected only one dialog interaction but more occurred, the intervening click
    request step will fail.
    </b>

    <b><em>Simple Example</em></b>

    <b>Consider the following <key>HTML</key> form:</b>

    <b><img src="images/dialog_simpleapp.gif"/></b>

    <b>If the user leaves fields blank, we want to pop up an alert as follows:</b>

    <b><img src="images/dialog_simplealert.gif"/></b>

    <b>The <key>HTML</key> might look something like:</b>

    <code caption="Simple dialog example HTML">
     <include src="examples/dialogSimpleExampleHtml.xml"/>
    </code>

    <b>The test might look something like:</b>

    <code caption="Simple dialog example Test">
     <include src="examples/expectDialogSimpleExampleTest.xml"/>
    </code>

<b><em>Complex Example</em></b>

    <b>Consider an application which performs some disk administration (the samples below
    don't actual do anything but show the kind of <key>javascript</key> messages that such
    an application would need to use).</b>

    <b><img src="images/dialog_app.gif"/></b>

    <b>When the user clicks the clean button they receive a <key>javascript</key> confirm dialog:</b>

    <b><img src="images/dialog_confirm.gif"/></b>

    <b>If the user selects "Cancel" they receive the following alert:</b>

    <b><img src="images/dialog_alert1.gif"/></b>

    <b>If the user selects "OK" they receive the following prompt dialog as a precaution:</b>

    <b><img src="images/dialog_prompt.gif"/></b>

    <b>If the user then clicks "Cancel" or enters incorrect text, e.g. "No" in the prompt, they receive the following alert dialog:</b>

    <b><img src="images/dialog_alert2.gif"/></b>

    <b>If the user enters the correct "YES" text and clicks "OK", they receive the following alert dialog (<em>NOTE</em>: nothing happens despite the message - this is just a hypothetical demo):</b>

    <b><img src="images/dialog_alert3.gif"/></b>

    <b>Here is the relevant part of the build.xml:</b>

    <code caption="Complex example test">
     <include src="examples/expectDialogComplexExampleTest.xml"/>
    </code>

    <b>This assumes you have some <key>HTML</key> containing a form and some <key>javascript</key> something like the following:</b>

    <code caption="Complex example HTML/JavaScript">
     <include src="examples/dialogComplexExampleHtml.xml"/>
    </code>

</post></section></manpage>